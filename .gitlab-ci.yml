variables:
  REMOTE_HOST: deploy@172.16.5.193
  API_IMAGE: ${CI_REGISTRY_IMAGE}/api
  WEBAPP_IMAGE: ${CI_REGISTRY_IMAGE}/webapp


stages:          # List of stages for jobs, and their order of execution
  - test
  - build
  - deploy

test:
  image: node:latest
  stage: test
  script:
    # Go to backend directory
    - cd backend
    # Run npm commands
    - npm install && npm test
    # Go to frontend directory
    - cd ../frontend
    # Run npm commands
    - npm install && npm test

build:
  image: docker:latest
  stage: build
  services:
    - docker:dind
  script:
    - docker login -u gitlab-ci-token -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    # Go to frontend directory
    - frontend
     # Run npm commands
    - npm run build



deploy:
  image: alpine:latest
  stage: deploy
  script:
    # Build and push Frontend
    - docker build -f frontend/Dockerfile -t "${FRONTEND_IMAGE}" .
    - docker push "${FRONTEND_IMAGE}"
    - apk update && apk add rsync openssh curl
    # Prepare SSH settings
    - mkdir -p ~/.ssh && (umask  077 ; echo "${DEPLOY_KEY_PRIVATE}" | base64 -d > ~/.ssh/id_rsa)
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    # Prepare files for transfer
    - mkdir remote_dir
    - cp docker-compose.yml remote_dir/docker-compose.yml
    - echo "BACKEND_IMAGE=${BACKEND_IMAGE}" >> remote_dir/.env
    - echo "FRONTEND_IMAGE=${FRONTEND_IMAGE}" >> remote_dir/.env
    # Transfer to server
    - rsync -r remote_dir "${REMOTE_HOST}:./"
    # Run commands on the server
    - ssh ${REMOTE_HOST} /bin/bash 
            "
            echo 'Starting..';
            cd ~/remote_dir;
            docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY;
            docker-compose pull;
            docker-compose up -d;
            "
